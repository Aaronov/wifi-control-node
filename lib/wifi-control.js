// Generated by CoffeeScript 1.10.0
(function() {
  var Future, WiFiControlSettings, WiFiLog, WiFiScanner, execSync, execSyncToBuffer, fs, parsePatterns;

  Future = require('fibers/future');

  WiFiScanner = require('node-wifiscanner2');

  fs = require('fs');

  execSyncToBuffer = require('child_process').execSync;

  execSync = function(command, options) {
    if (options == null) {
      options = {};
    }
    return execSyncToBuffer(command, options).toString();
  };

  WiFiControlSettings = {
    iface: null,
    debug: false
  };

  parsePatterns = {
    nmcli_line: new RegExp(/([A-Z]+):\s+(.*)+/)
  };

  WiFiLog = function(msg, error) {
    if (error == null) {
      error = false;
    }
    if (error) {
      return console.error("WiFiControl: " + msg);
    } else {
      if (WiFiControlSettings.debug) {
        return console.log("WiFiControl: " + msg);
      }
    }
  };

  module.exports = {
    init: function(settings) {
      if (settings == null) {
        settings = {};
      }
      this.configure(settings);
      if (settings.iface == null) {
        return this.findInterface(settings.iface);
      }
    },
    configure: function(settings) {
      if (settings == null) {
        settings = {};
      }
      if (settings.debug != null) {
        WiFiControlSettings.debug = settings.debug;
        WiFiLog("Debug mode set to: " + settings.debug);
      }
      if (settings.iface != null) {
        return this.findInterface(settings.iface);
      }
    },
    findInterface: function(iface) {
      var _iface, _interface, _msg, error, error1, findInterface, interfaceResults;
      if (iface == null) {
        iface = null;
      }
      try {
        if (iface != null) {
          _msg = "Wireless interface manually set to " + iface + ".";
          WiFiLog(_msg);
          WiFiControlSettings.iface = iface;
          return {
            success: true,
            msg: _msg,
            "interface": iface
          };
        }
        WiFiLog("Determining system wireless interface...");
        switch (process.platform) {
          case "linux":
            WiFiLog("Host machine is Linux.");
            findInterface = "ip link show | grep wlan | grep -i \"state UP\"";
            WiFiLog("Executing: " + findInterface);
            _interface = execSync(findInterface);
            if (_interface) {
              _iface = _interface.trim().split(": ")[1];
              _msg = "Automatically located wireless interface " + _iface + ".";
              WiFiLog(_msg);
              interfaceResults = {
                success: true,
                msg: _msg,
                "interface": _iface
              };
            } else {
              _msg = "Error: No network interface found.";
              WiFiLog(_msg, true);
              interfaceResults = {
                success: false,
                msg: _msg,
                "interface": null
              };
            }
            break;
          case "win32":
            WiFiLog("Host machine is Windows.");
            findInterface = "echo wlan";
            WiFiLog("Executing: " + findInterface);
            _interface = execSync(findInterface);
            if (_interface) {
              _iface = _interface.trim();
              _msg = "Automatically located wireless interface " + _iface + ".";
              WiFiLog(_msg);
              interfaceResults = {
                success: true,
                msg: _msg,
                "interface": _iface
              };
            } else {
              _msg = "Error: No network interface found.";
              WiFiLog(_msg, true);
              interfaceResults = {
                success: false,
                msg: _msg,
                "interface": null
              };
            }
            break;
          case "darwin":
            WiFiLog("Host machine is MacOS.");
            findInterface = "networksetup -listallhardwareports | awk '/^Hardware Port: (Wi-Fi|AirPort)$/{getline;print $2}'";
            WiFiLog("Executing: " + findInterface);
            _interface = execSync(findInterface);
            if (_interface) {
              _iface = _interface.trim();
              _msg = "Automatically located wireless interface " + _iface + ".";
              WiFiLog(_msg);
              interfaceResults = {
                success: true,
                msg: _msg,
                "interface": _iface
              };
            } else {
              _msg = "Error: No network interface found.";
              WiFiLog(_msg, true);
              interfaceResults = {
                success: false,
                msg: _msg,
                "interface": null
              };
            }
            break;
          default:
            WiFiLog("Unrecognized operating system.  No known method for acquiring wireless interface.");
            interfaceResults = {
              success: false,
              msg: "No valid wireless interface could be located.",
              "interface": null
            };
        }
        WiFiControlSettings.iface = interfaceResults["interface"];
        return interfaceResults;
      } catch (error1) {
        error = error1;
        _msg = "Encountered an error while searching for wireless interface: " + error;
        WiFiLog(_msg, true);
        return {
          success: false,
          msg: _msg
        };
      }
    },
    scanForWiFi: function() {
      var KEY, VALUE, _msg, _network, c, error, error1, error2, j, k, l, len, len1, ln, networks, nwk, parsedLine, ref, ref1, scanRequest, scanResults;
      if (WiFiControlSettings.iface == null) {
        _msg = "You cannot scan for nearby WiFi networks without a valid wireless interface.";
        WiFiLog(_msg, true);
        return {
          success: false,
          msg: _msg
        };
      }
      try {
        WiFiLog("Scanning for nearby WiFi Access Points...");
        if (process.platform === "linux") {
          scanResults = execSync("nmcli -m multiline device wifi list");
          networks = [];
          ref = scanResults.split('*:');
          for (c = j = 0, len = ref.length; j < len; c = ++j) {
            nwk = ref[c];
            if (c === 0) {
              continue;
            }
            _network = {};
            ref1 = nwk.split('\n');
            for (k = l = 0, len1 = ref1.length; l < len1; k = ++l) {
              ln = ref1[k];
              try {
                parsedLine = parsePatterns.nmcli_line.exec(ln.trim());
                KEY = parsedLine[1];
                VALUE = parsedLine[2];
              } catch (error1) {
                error = error1;
                continue;
              }
              switch (KEY) {
                case "SSID":
                  _network.ssid = String(VALUE);
                  break;
                case "CHAN":
                  _network.channel = String(VALUE);
                  break;
                case "SIGNAL":
                  _network.signal_level = String(VALUE);
                  break;
                case "SECURITY":
                  _network.security = String(VALUE);
              }
            }
            if (_network.ssid !== "--") {
              networks.push(_network);
            }
          }
          _msg = "Nearby WiFi APs successfully scanned (" + networks.length + " found).";
          WiFiLog(_msg);
          return {
            success: true,
            msg: _msg,
            networks: networks
          };
        } else {
          scanRequest = new Future;
          WiFiScanner.scan((function(_this) {
            return function(error, data) {
              if (error) {
                WiFiLog("Error: " + error, true);
                return scanRequest["return"]({
                  success: false,
                  msg: "We encountered an error while scanning for WiFi APs: " + error
                });
              } else {
                _msg = "Nearby WiFi APs successfully scanned (" + data.length + " found).";
                WiFiLog(_msg);
                return scanRequest["return"]({
                  success: true,
                  networks: data,
                  msg: _msg
                });
              }
            };
          })(this));
          return scanRequest.wait();
        }
      } catch (error2) {
        error = error2;
        return {
          success: false,
          msg: "We encountered an error while scanning for WiFi APs: " + error
        };
      }
    },
    connectToAP: function(_ap) {
      var COMMANDS, _msg, com, connectToAPChain, error, error1, error2, error3, i, j, l, len, ref, ssidExist, ssid_hex, stdout, xmlContent, xmlWriteRequest;
      if (WiFiControlSettings.iface == null) {
        _msg = "You cannot connect to a WiFi network without a valid wireless interface.";
        WiFiLog(_msg, true);
        return {
          success: false,
          msg: _msg
        };
      }
      try {
        if (!_ap.ssid.length) {
          return {
            success: false,
            msg: "Please provide a non-empty SSID."
          };
        }
        if (_ap.password == null) {
          _ap.password = "";
        }
        switch (process.platform) {
          case "linux":
            COMMANDS = {
              "delete": "nmcli connection delete \"" + _ap.ssid + "\"",
              connect: "nmcli device wifi connect \"" + _ap.ssid + "\""
            };
            if (_ap.password.length) {
              COMMANDS.connect += " password \"" + _ap.password + "\"";
            }
            try {
              stdout = execSync("nmcli connection show | grep \"" + _ap.ssid + "\"");
              if (stdout.length) {
                ssidExist = true;
              }
            } catch (error1) {
              error = error1;
              ssidExist = false;
            }
            connectToAPChain = [];
            if (ssidExist) {
              WiFiLog("It appears there is already a connection for this SSID.");
              connectToAPChain.push("delete");
            }
            connectToAPChain.push("connect");
            break;
          case "win32":
            WiFiLog("Generating win32 wireless profile...");
            ssid_hex = "";
            for (i = j = 0, ref = _ap.ssid.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
              ssid_hex += ssid.charCodeAt(i).toString(16);
            }
            xmlContent = "<?xml version=\"1.0\"?> <WLANProfile xmlns=\"http://www.microsoft.com/networking/WLAN/profile/v1\"> <name>" + _ap.ssid + "</name> <SSIDConfig> <SSID> <hex>" + ssid_hex + "</hex> <name>" + _ap.ssid + "</name> </SSID> </SSIDConfig> <connectionType>ESS</connectionType> <connectionMode>manual</connectionMode> <MSM> <security> <authEncryption> <authentication>open</authentication> <encryption>none</encryption> <useOneX>false</useOneX> </authEncryption> </security> </MSM> </WLANProfile>";
            xmlWriteRequest = new Future;
            fs.writeFile(_ap.ssid + ".xml", xmlContent, function(err) {
              if (err != null) {
                WiFiLog(err, true);
                return xmlWriteRequest["return"](false);
              } else {
                return xmlWriteRequest["return"](true);
              }
            });
            if (!xmlWriteRequest.wait()) {
              return {
                success: false,
                msg: "Encountered an error connecting to AP:"
              };
            }
            COMMANDS = {
              loadProfile: "netsh " + WiFiControlSettings.iface + " add profile filename=\"" + _ap.ssid + ".xml\"",
              connect: "netsh " + WiFiControlSettings.iface + " connect ssid=\"" + _ap.ssid + "\" name=\"" + _ap.ssid + "\""
            };
            connectToAPChain = ["loadProfile", "connect"];
            break;
          case "darwin":
            COMMANDS = {
              connect: "networksetup -setairportnetwork " + WiFiControlSettings.iface + " \"" + _ap.ssid + "\""
            };
            if (_ap.password.length) {
              COMMANDS.connect += " \"" + _ap.password + "\"";
            }
            connectToAPChain = ["connect"];
        }
        for (l = 0, len = connectToAPChain.length; l < len; l++) {
          com = connectToAPChain[l];
          WiFiLog("Executing:\t" + COMMANDS[com]);
          try {
            stdout = execSync(COMMANDS[com]);
          } catch (error2) {
            error = error2;
            if (!/nmcli device wifi connect/.test(COMMANDS[com])) {
              WiFiLog(error, true);
              return {
                success: false,
                msg: error
              };
            }
          }
          if (process.platform === "darwin" && stdout === ("Could not find network " + _ap.ssid + ".")) {
            WiFiLog(stdout, true);
            return {
              success: false,
              msg: stdout
            };
          }
          WiFiLog("Success!");
        }
        return {
          success: true,
          msg: "Successfully connected to " + _ap.ssid + "!"
        };
      } catch (error3) {
        error = error3;
        _msg = "Encountered an error while connecting to " + _ap.ssid + ": " + error;
        WiFiLog(_msg, true);
        return {
          success: false,
          msg: _msg
        };
      }
    },
    resetWiFi: function() {
      var COMMANDS, _msg, com, error, error1, j, len, resetWiFiChain, stdout;
      try {
        switch (process.platform) {
          case "linux":
            COMMANDS = {
              disableNetworking: "nmcli networking off",
              enableNetworking: "nmcli networking on"
            };
            resetWiFiChain = ["disableNetworking", "enableNetworking"];
            break;
          case "win32":
            COMMANDS = {
              disconnect: "netsh " + WiFiControlSettings.iface + " disconnect"
            };
            resetWiFiChain = ["disconnect"];
            break;
          case "darwin":
            COMMANDS = {
              enableAirport: "networksetup -setairportpower " + WiFiControlSettings.iface + " on",
              disableAirport: "networksetup -setairportpower " + WiFiControlSettings.iface + " off"
            };
            resetWiFiChain = ["disableAirport", "enableAirport"];
        }
        for (j = 0, len = resetWiFiChain.length; j < len; j++) {
          com = resetWiFiChain[j];
          WiFiLog("Executing:\t" + COMMANDS[com]);
          stdout = execSync(COMMANDS[com]);
          _msg = "Success!";
          WiFiLog(_msg);
        }
        return {
          success: true,
          msg: "Successfully reset WiFi!"
        };
      } catch (error1) {
        error = error1;
        _msg = "Encountered an error while resetting wireless interface: " + error;
        WiFiLog(_msg, true);
        return {
          success: false,
          msg: _msg
        };
      }
    },
    getIfaceState: function() {
      var KEY, VALUE, _msg, connectionData, error, error1, error2, foundInterface, interfaceState, j, k, len, ln, parsedLine, ref;
      try {
        interfaceState = {};
        switch (process.platform) {
          case "linux":
            foundInterface = false;
            connectionData = execSync("nmcli -m multiline device status");
            ref = connectionData.split('\n');
            for (k = j = 0, len = ref.length; j < len; k = ++j) {
              ln = ref[k];
              try {
                parsedLine = parsePatterns.nmcli_line.exec(ln.trim());
                KEY = parsedLine[1];
                VALUE = parsedLine[2];
                if (VALUE === "--") {
                  VALUE = null;
                }
              } catch (error1) {
                error = error1;
                continue;
              }
              switch (KEY) {
                case "DEVICE":
                  if (VALUE === WiFiControlSettings.iface) {
                    foundInterface = true;
                  }
                  break;
                case "STATE":
                  if (foundInterface) {
                    interfaceState.state = VALUE;
                  }
                  break;
                case "CONNECTION":
                  if (foundInterface) {
                    interfaceState.ssid = VALUE;
                  }
              }
              if (KEY === "CONNECTION" && foundInterface) {
                break;
              }
            }
            if (!foundInterface) {
              return {
                success: false,
                msg: "Unable to retrieve state of network interface " + WiFiControlSettings.iface + "."
              };
            }
            break;
          case "win32":
            console.log("hi");
            break;
          case "darwin":
            console.log("hi");
        }
        return {
          success: true,
          msg: "Successfully acquired state of network interface " + WiFiControlSettings.iface + ".",
          ifaceState: interfaceState
        };
      } catch (error2) {
        error = error2;
        _msg = "Encountered an error while acquiring network interface connection state: " + error;
        WiFiLog(_msg, true);
        return {
          success: false,
          msg: _msg
        };
      }
    }
  };

}).call(this);
